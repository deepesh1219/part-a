ASSIGNMENT QUESTIONS 
(Introduction To Javascript In Operations Part - A)
(Index.HTML)

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script src="script.js"></script>
</body>
</html>

(Part - 1)

1.   Explain the role of operators in Javascript.Why are they essential in programming? 
Ans. Operators are essential for performing computations, making decisions, and manipulating data in programming. They enable us to perform mathematical calculations, concatenate strings, compare values, control program flow, and handle complex operations.
They are essential in programming language as it can be used :-
* Perform Arithmetic Operations
* Assign operators
* Compare Operators
* Perfrom Logic Operations.

2.   Describe the categorization of operators in Javascript based on their functionality.Provide their examples for each category ?
Ans. Operators in JavaScript are categorized based on their functionality into the following groups:- 
1. Aritrhmetic Operators :- Arithmetic operators perform arithmetic on numbers (literals or variables).
2. Assignment Operators:- These operators assin values to variables.
3. Comparision Operators:- These operators compare two values and return a Boolean value (true or false).
4. Logical Operators:- These operators perform logical operations on Boolean values.

3.   Differentiate between unary, and binary operators in JavaScript. Give examples of each.
Ans. Unary Operators :- Unary operators are the operators which needs only one operand to operate on for example negation, increment, decrement.
     Binary Operators :- Binary operators needs two operands to operate, for example addition, subtraction, division.

4.   Discuss the precedence and associativity of operators in JavaScript. Why is understanding these
concepts important?
Ans. *Precedence refers to the order in which operators are evaluated when multiple operators are present
in an expression. Operators with higher precedence are executed first. For example, in the expression 6 + 5 * 4,
multiplication (*) has higher precedence than addition (+), so the multiplication is performed first.

*Associativity refers to the order in which operators of the same precedence are evaluated. Some operators
associate left to right, meaning they are evaluated from left to right. Others associate right to left, meaning they
are evaluated from right to left.     

5. Write a JavaScript program that calculates the simple interest using the formula Simple interest =
(principal * rate * time) / 100.

6. Write a Javascript program to calculate the Body Mass Index (BMI) using the formula BMI = weight (kg)/
height * height.

7. Write a program in JavaScript to calculate the area of a circle given its radius value of 10. Use
appropriate arithmetic operators.


ASSIGNMENT QUESTIONS (PART - 2)

1.  Explain what JavaScript is and its role in web development.
Ans. JavaScript is a scripting or programming language that allows you to implement complex features on web pages — every time a web page does more than just sit there and display static information for you to look at — displaying timely content updates, interactive maps, animated 2D/3D graphics, scrolling video jukeboxes...
The role of javascript in web development is JavaScript (JS) is a cross-platform, object-oriented programming language used by developers to make web pages interactive.

2.  Explain the key differences between JavaScript and HTML. Provide examples of situations where
you would use each.

Ans. JavaScript

1. Programming Language: JavaScript is a high-level programming language used for adding interactivity
and functionality to web pages.
2. Dynamic Behaviour : JavaScript allows you to create dynamic elements and behaviors on a webpage. For
example, you can validate form inputs, create animations, or update content in real-time based on user
actions.
3. Variables and logic : JavaScript includes variables, data types, and control structures like loops and
conditionals, enabling you to create complex logic and algorithms.
4. Client Side : JavaScript runs in web browsers, making it a client-side technology. It executes on the user's
device, enabling real-time user interactions.

HTML

1. Markup Language : HTML is a markup language used for structuring and presenting content on web pages.
2. Static Structure : HTML defines the static structure of a webpage, including headings, paragraphs, lists, links,
and images.
3. Tags Ans Elements : HTML uses tags (e.g., <div>, <p>, <a>) to create elements that structure the content and
provide semantic meaning.
4. Content Presentation : HTML's primary role is to define the content's structure and semantics, which browsers render as a web page.

EXAMPLE :-

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactrive Web Pages</title>
    <script>
         //JavaScript function to change the color of a text when clickedfunction changeColor() {
            //var textElement = document.getElementById("myText");
           // textElement.style.color = "blue";
        //}
    </script>
</head>
<body>
    <h1>Welcome to Interactive Web Page</h1>
    <p>This is  sample webpage with a <span id="myText"
   onclick="changeColor()">clickable text</span>.</p>
</body>
</html>

3.  List and describe the five primitive data types in JavaScript.
Ans. Number:- The number data type represents numeric values. It can include integers, floating-point numbers,
and special values like NaN (Not-a-Number) and Infinity. For example:
2. String
The string data type represents sequences of characters enclosed in single (' '), double (" "), or backticks (` `)
quotes. Strings are used to represent text data. For example:
3. Boolean
The boolean data type has only two values, true and false, and is used to represent logical values. Booleans are
commonly used for conditions and comparisons. For example:
4. Null
The null data type represents the intentional absence of any object value or a value that has been explicitly set
to indicate no value. It is often used to initialize variables before assigning meaningful values. For example:
5. Undefined
The undefined data type represents a variable that has been declared but has not been assigned a value. It is
often the initial value of variables. For example:

4. What is the purpose of declaring variables in JavaScript, and how do you declare them using the
'let' keyword?
Ans. Purpose of Declaring Variables in JavaScript:
The purpose of declaring variables in JavaScript is to reserve a memory location for storing data values that
can be used throughout a program. Variables act as placeholders for data, making it easier to work with and
manipulate information in your code. Declaring variables allows you to:

1.Store Data :- Variables can store various types of data, such as numbers, text, and objects.
2.Manipulate Data :- Not-a-Number You can perform operations on the data stored in variables, such as calculations,
concatenations, and comparisons.
3.Reuse Data :- Variables enable you to reuse values at different points in your code, reducing redundancy.
4. Control Floe:- Variables can be used to control the flow of your program through conditions and loops.

5. Explain the importance of comments in JavaScript and provide examples of single-line and
multi-line comments.
Ans. Comments in JavaScript are essential for code readability, maintainability, and collaboration among
developers.

6. Explain the importance of choosing meaningful and descriptive variable names in JavaScript.
Provide an example where using a clear identifier improves code readability.

Ans. Choosing meaningful and descriptive variable names in JavaScript is crucial for code readability and
maintainability. Here are several reasons why it's important:

1.Readability:-  Descriptive variable names make your code easier to read and understand. Developers
(including yourself) can quickly grasp the purpose of a variable without needing to analyze the code in detail.
2.Maintainability:-  Well-named variables reduce the chances of introducing bugs when modifying or
extending code. You're less likely to misunderstand the variable's role and make incorrect changes.
3. Documentation :- Descriptive variable names serve as a form of self-documentation. They convey the intent
and context of the variable, reducing the need for additional comments.
4. Collaboration :- When working in teams, clear variable names facilitate communication among developers.
Team members can understand each other's code more easily, leading to more efficient collaboration.
5.Error Prevention :- Meaningful variable names help prevent errors caused by using the wrong variable or
making incorrect assumptions about variable values.


(Script.JS)
(Part - 1)
2. 
//1.Arithmetic Operators :-//
// Addition (+)
const sum = 1 + 6; // sum is now equal to 7
// Subtraction (-)
const difference = 10 - 3; // difference is now equal to 7
// Multiplication (*)
const product = 3 * 7; // product is now equal to 21
// Division (/)
const quotient = 24 / 3; // quotient is now equal to 8
// Exponentiation (**)
const power = 2 ** 5; // power is now equal to 32
// Modulo (%)
const remainder = 10 % 3; // remainder is now equal to 1.

//2. Assignment Operators :-//
// Assignment operator (=)
const myVariable = 10;
// Addition assignment operator (+=)
myVariable += 4; // myVariable is now equal to 14
// Subtraction assignment operator (-=)
myVariable -= 5; // myVariable is now equal to 10
// Multiplication assignment operator (*=)
myVariable *= 2; // myVariable is now equal to 20
// Division assignment operator (/=)
myVariable /= 2; // myVariable is now equal to 10
// Modulo assignment operator (%=)
myVariable %= 3; // myVariable is now equal to 1

//3. Comparision Operators :-//
// Equal to (==)
const isEqual = 10 == 10; // isEqual is now equal to true
// Not equal to (!=)
const isNotEqual = 10 != 10; // isNotEqual is now equal to false
// Greater than (>)
const isGreaterThan = 10 > 5; // isGreaterThan is now equal to true
// Less than (<)
const isLessThan = 10 < 5; // isLessThan is now equal to false
// Greater than or equal to (>=)
const isGreaterThanOrEqual = 10 >= 10; // isGreaterThanOrEqual is now equal to
true
// Less than or equal to (<=)
const isLessThanOrEqual = 10 <= 5; // isLessThanOrEqual is now equal to false

//4. Logical Operators :-//
// AND (&&)
const isAndTrue = true && true; // isAndTrue is now equal to true
const isAndFalse = true && false; // isAndFalse is now equal to false
// OR (||)
const isOrTrue = true || false; // isOrTrue is now equal to true
const isOrFalse = false || false; // isOrFalse is now equal to false
// NOT (!)
const isNotTrue = !true; // isNotTrue is now equal to false
const isNotFalse = !false; // isNotFalse is now equal to true

3. //Unary Operators :-//
//Unary plus (+)	                Tries to convert the operand into a number
//Unary negation (-)	            Tries to convert the operand into a number and negates after
//Increment (++)	                Adds one to its operand
//Decrement (--)	                Decrements by one from its operand
//Logical NOT (!)	                Converts to boolean value then negates it.

// Binary Operators :-//
//           (+)
//           (*)
//           (/)
//           (%)
//           (==)
//           (===)
//           (!=)
//           (!==)
//           (>)
//           (<)
//           (>=)
//           (<=)
//           (&&)
//           (||)

4.  //Precedence:-
const result = 6 + 5 * 4; // The result will be 26, not 44 (if addition had higher precedence)
   // Associativity:-
const resul = 10 + 5 + 2; // The result will be 17 (evaluated as (10 + 5) + 2)

5.
const principal = 100
const rate = 3
const time = 4 
const resu = (principal * rate * time)/100
console.log("Simple Interest =", resu)

// output // 
// 12 //

6.
const height = 210 // in cm
const weight = 85 // in kg
const BMI = weight/ height * height
console.log("BMI =", BMI)

// output//
//85//

7. 
const radius = 10; // Radius of the circle
// Calculate the area of the circle: area = π * radius^2
const pi = Math.PI; // Approximate value of pi
const area = pi * Math.pow(radius, 2);
console.log("Area of the circle:", area);

// output //
// 314.159265 //

(Part - 2 )

3.  //number :-
let integerNumber = 42;
let floatingPointNumber = 3.14;
let notANumber = NaN;
let positiveInfinity = Infinity;

  //string
let name = "tony stark";
let message = 'Hello, World!';
let templateLiteral = `My name is ${name}`;

  //boolean 
  let isUserLoggedIn = true;
  let isDataValid = false;
 
  //null
  let address = null;

  //undefined
  let firstName; // firstName is undefined

  5. //Single Line Comments 
  
// This is a single-line comment
let age = 30; // This comment explains the variable's purpose

//Multi Line Comment 

/*
This is a multi-line comment.
It can provide detailed explanations for code blocks.
*/
function calculateArea(width, height) {
    return width * height;
    }
    
 6.
 // Less Descriptive Variable Names
let a = 10; // Price of the product
let b = 5; // Quantity of the product
let total = a * b; // Calculate total cost
// More Descriptive Variable Names
let productPrice = 10; // Price of the product
let productQuantity = 5; // Quantity of the product
let totalPrice = productPrice * productQuantity; // Calculate total cost   